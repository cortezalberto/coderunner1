version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: playground
      POSTGRES_USER: playground
      POSTGRES_PASSWORD: playground
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    # Production tuning for 300 concurrent users
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2621kB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U playground"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for RQ
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Build runner image (runs once)
  runner-build:
    build:
      context: ./runner
      dockerfile: Dockerfile
    image: py-playground-runner:latest
    command: "true"
    profiles:
      - build

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://playground:playground@postgres:5432/playground
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend:ro
    # Production-ready Uvicorn configuration
    # - workers=4: Multiple processes for 300 concurrent users
    # - timeout-keep-alive=5: Close idle connections quickly
    # - limit-concurrency=1000: Max concurrent connections per worker
    # - backlog=2048: Queue size for pending connections
    # - reload: Disabled in production (enable for development)
    command: uvicorn backend.app:app --host 0.0.0.0 --port 8000 --workers 4 --timeout-keep-alive 5 --limit-concurrency 1000 --backlog 2048

  # RQ Worker (submissions queue)
  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      DATABASE_URL: postgresql://playground:playground@postgres:5432/playground
      REDIS_URL: redis://redis:6379/0
      RUNNER_IMAGE: py-playground-runner:latest
      WORKSPACE_DIR: /workspaces
      HOST_WORKSPACE_DIR: ${PWD}/workspaces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend:/app/backend:ro
      - ./worker:/app/worker:ro
      - ./workspaces:/workspaces
    command: python -m rq.cli worker --url redis://redis:6379/0 submissions

  # Workspace cleaner (runs cleanup every 30 minutes)
  cleaner:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      DATABASE_URL: postgresql://playground:playground@postgres:5432/playground
      REDIS_URL: redis://redis:6379/0
      WORKSPACE_DIR: /workspaces
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend:ro
      - ./worker:/app/worker:ro
      - ./workspaces:/workspaces
    command: sh -c "while true; do python -c 'from worker.services.workspace_cleaner import cleanup_old_workspaces; cleanup_old_workspaces()'; sleep 1800; done"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src

volumes:
  postgres_data:
  workspaces:
